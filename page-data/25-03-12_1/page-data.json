{"componentChunkName":"component---src-templates-blog-template-js","path":"/25-03-12_1/","result":{"data":{"cur":{"id":"d5d5bef9-d525-50f6-84fe-53507b823a15","html":"<p>출처 : <a href=\"https://www.acmicpc.net/problem/7576\">https://www.acmicpc.net/problem/7576</a></p>\n<p>백준 7576번 토마토</p>\n<p> </p>\n<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<hr>\n<p>철수의 토마토 농장에서는 토마토를 보관하는 큰 창고를 가지고 있다. 토마토는 아래의 그림과 같이 격자 모양 상자의 칸에 하나씩 넣어서 창고에 보관한다.</p>\n<p><img src=\"https://u.acmicpc.net/de29c64f-dee7-4fe0-afa9-afd6fc4aad3a/Screen%20Shot%202021-06-22%20at%202.41.22%20PM.png\" alt=\"img\"></p>\n<p>창고에 보관되는 토마토들 중에는 잘 익은 것도 있지만, 아직 익지 않은 토마토들도 있을 수 있다. 보관 후 하루가 지나면, 익은 토마토들의 인접한 곳에 있는 익지 않은 토마토들은 익은 토마토의 영향을 받아 익게 된다. 하나의 토마토의 인접한 곳은 왼쪽, 오른쪽, 앞, 뒤 네 방향에 있는 토마토를 의미한다. 대각선 방향에 있는 토마토들에게는 영향을 주지 못하며, 토마토가 혼자 저절로 익는 경우는 없다고 가정한다. 철수는 창고에 보관된 토마토들이 며칠이 지나면 다 익게 되는지, 그 최소 일수를 알고 싶어 한다.</p>\n<p>토마토를 창고에 보관하는 격자모양의 상자들의 크기와 익은 토마토들과 익지 않은 토마토들의 정보가 주어졌을 때, 며칠이 지나면 토마토들이 모두 익는지, 그 최소 일수를 구하는 프로그램을 작성하라. 단, 상자의 일부 칸에는 토마토가 들어있지 않을 수도 있다.</p>\n<h2 id=\"문제-파악\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%8C%8C%EC%95%85\" aria-label=\"문제 파악 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 파악</h2>\n<hr>\n<h3 id=\"1-생각의-흐름-\" style=\"position:relative;\"><a href=\"#1-%EC%83%9D%EA%B0%81%EC%9D%98-%ED%9D%90%EB%A6%84-\" aria-label=\"1 생각의 흐름  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 생각의 흐름 💡</h3>\n<ul>\n<li>\n<p>bfs에서는 queue에서 뽑은 원소(익은 토마토 위치) 1개를 하나의 턴에 상하좌우를 탐색한다. 다시 말해, <strong>상하좌우를 탐색하는 것이 모두 같은 날(day)에 이루어진다</strong>.</p>\n</li>\n<li>\n<p>여기서 깊이 생각해볼 문제가 있다.</p>\n<ul>\n<li>하루가 지나면서 3개의 토마토가 익었다고 가정하자. (queue에 3개 추가)</li>\n<li>그러면 <em><strong>그 익은 토마토 3개의 각 위치에서 다시 상하좌우를 탐색하여 queue에 추가하는 모든 위치를 같은 날로 인식하게 해야 하는데 어떤 식으로 할 것인가?</strong></em>\n=> queue에 익은 토마토의 위치를 추가할 때, <strong>해당 토마토가 익은 날(day)을 함께 추가</strong>해주자.</li>\n<li>해당 토마토가 익은 날을 모두 set()에 넣고 모든 토마토가 익은 날을 정리하고, 최댓값을 반환해주면 될 것 같다.</li>\n</ul>\n</li>\n<li>\n<p>queue가 빌 때까지 bfs를 진행했는데도(토마토를 끝까지 익혀도) 0이 남아 있으면 반환값을 -1로 해주면 될 것 같다.</p>\n</li>\n</ul>\n<p> </p>\n<h3 id=\"2-문제-해결에-필요한-것-️\" style=\"position:relative;\"><a href=\"#2-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%83-%EF%B8%8F\" aria-label=\"2 문제 해결에 필요한 것 ️ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 문제 해결에 필요한 것 🗝️</h3>\n<ul>\n<li>익은 토마토의 위치와 익은 날짜를 함께 저장하는 queue가 필요할 것</li>\n<li><strong>현재 익은 토마토의 익은 날을 저장</strong>하고, <strong>상하좌우를 탐색</strong>하여 <strong>아직 익지 않은 토마토(0)의 위치와 다음 날을 queue에 저장</strong>하도록 하는 함수가 필요할 것임 (<strong>ripe() 함수</strong>)</li>\n<li><strong>queue에서 원소 하나씩 뽑아서 위치와 익은 날을 ripe() 함수에 전달</strong>해주는 함수 필요할 것임 (<strong>bfs() 함수</strong>)\n(최종적으로 반환할 값도 정해주는 함수임)</li>\n</ul>\n<p> </p>\n<h2 id=\"문제-해결\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0\" aria-label=\"문제 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 해결</h2>\n<hr>\n<h3 id=\"1-소스-코드\" style=\"position:relative;\"><a href=\"#1-%EC%86%8C%EC%8A%A4-%EC%BD%94%EB%93%9C\" aria-label=\"1 소스 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 소스 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># queue에서 하나 뽑아옴 (각 원소는 위치와 queue에 추가된 날이 들어있음)</span>\n        x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> day <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n        <span class=\"token comment\"># queue가 빌 때까지, queue의 각 원소가 익은 날을 day_set에 계속 업데이트 함</span>\n        ripe<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 모두 익지 못하는 상황에 -1 출력 (bfs 끝까지 진행했는데도 0이 있는 상황)</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>tomato_map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 해당 row에 0이 하나라도 있으면 -1로 반환</span>\n        <span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token keyword\">in</span> row<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  \n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>day_set<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ripe</span><span class=\"token punctuation\">(</span>rx<span class=\"token punctuation\">,</span> ry<span class=\"token punctuation\">,</span> rday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 현재 queue의 원소가 익은 날을 day_set에 저장함</span>\n    day_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>rday<span class=\"token punctuation\">)</span>\n  \n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> rx <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> ry <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 익지 않은 토마토가 상하좌우에 있을 때</span>\n            <span class=\"token keyword\">if</span> tomato_map<span class=\"token punctuation\">[</span>rx <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ry <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 상하좌우의 토마토가 익음</span>\n                tomato_map<span class=\"token punctuation\">[</span>rx <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ry <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n                <span class=\"token comment\"># 다음 queue의 원소를 다음 날로 설정해 함께 저장</span>\n                <span class=\"token comment\"># rday += 1로 쓰면, 한 원소에 대해 상하좌우를 탐색할 때 같은 rday가 아니게 됨</span>\n                queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>rx <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ry <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rday <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n\nn<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntomato_map <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nqueue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\ndy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nday_set <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> tomato_map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 초기 1의 위치, 0일차</span>\n            day_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>bfs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p> </p>\n<h3 id=\"2-소스-코드-해석\" style=\"position:relative;\"><a href=\"#2-%EC%86%8C%EC%8A%A4-%EC%BD%94%EB%93%9C-%ED%95%B4%EC%84%9D\" aria-label=\"2 소스 코드 해석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 소스 코드 해석</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">n<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntomato_map <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nqueue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\ndy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nday_set <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> tomato_map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 초기 1의 위치, 0일차</span>\n            day_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>bfs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>일반적인 bfs 문제 초기 설정들이다.</li>\n<li><strong>queue에 초기 익은 토마토(1)의 위치와 0(0일차)을 함께 묶어 넣어준다</strong> !!\n(day_set에도 0을 추가해준다.)</li>\n</ul>\n<p> </p>\n<p><strong>[bfs() 함수]</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># queue에서 하나 뽑아옴 (각 원소는 위치와 queue에 추가된 날이 들어있음)</span>\n        x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> day <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n        <span class=\"token comment\"># queue가 빌 때까지, queue의 각 원소가 익은 날을 day_set에 계속 업데이트 함</span>\n        ripe<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 모두 익지 못하는 상황에 -1 출력 (bfs 끝까지 진행했는데도 0이 있는 상황)</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>tomato_map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 해당 row에 0이 하나라도 있으면 -1로 반환</span>\n        <span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token keyword\">in</span> row<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  \n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>day_set<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>queue에서 익은 토마토의 위치 x, y와 익은 날짜 day를 하나씩 함께 뽑아온다.</p>\n</li>\n<li>\n<p>x, y, day를 인자로 하여 ripe() 함수를 호출한다.</p>\n<ul>\n<li>상하좌우 탐색하고 익지 않은 토마토들을 queue에 담아오고 (위치와 다음 일차를 담음)</li>\n<li>토마토가 익은 날들을 day_set에 담는다.</li>\n</ul>\n</li>\n<li>\n<p>queue가 빌 때까지 (최대한 토마토를 다 익게 한 후) 진행한 후에 for문을 통해 아직 익지 않은 토마토(0)가 있으면 -1을 반환하도록 한다.</p>\n</li>\n<li>\n<p>0이 없으면 day_set의 최댓값을 반환하도록 한다.</p>\n</li>\n</ul>\n<p> </p>\n<p><strong>[ripe() 함수]</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">ripe</span><span class=\"token punctuation\">(</span>rx<span class=\"token punctuation\">,</span> ry<span class=\"token punctuation\">,</span> rday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 현재 queue의 원소가 익은 날을 day_set에 저장함</span>\n    day_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>rday<span class=\"token punctuation\">)</span>\n  \n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> rx <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> ry <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 익지 않은 토마토가 상하좌우에 있을 때</span>\n            <span class=\"token keyword\">if</span> tomato_map<span class=\"token punctuation\">[</span>rx <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ry <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 상하좌우의 토마토가 익음</span>\n                tomato_map<span class=\"token punctuation\">[</span>rx <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ry <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n                <span class=\"token comment\"># 다음 queue의 원소를 다음 날로 설정해 함께 저장</span>\n                <span class=\"token comment\"># rday += 1로 쓰면, 한 원소에 대해 상하좌우를 탐색할 때 같은 rday가 아니게 됨</span>\n                queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>rx <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ry <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rday <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>현재 queue의 원소(익은 토마토 위치와 익은 날)를 인자로 받아서 day_set에 먼저 익은 날을 추가해준다.</p>\n</li>\n<li>\n<p>for문을 이용해 현재 익은 토마토의 상하좌우를 탐색하고, 익지 않은 토마토가 있을 때 익은 토마토(1)로 바꿔주고 queue에 <strong>해당 토마토의 위치</strong>와 **다음 날(rday+1)**을 함께 추가해주자.</p>\n</li>\n<li>\n<p>아, 그리고…</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> rx <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> ry <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></code></pre></div>\n<p>잊지 말자…</p>\n</li>\n</ul>\n<p> </p>\n<p>끝. 이제 bfs 문제 풀 만 한 것 같은데… 자만하지 말고 더 달리자!!!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%A0%9C\">문제</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%8C%8C%EC%95%85\">문제 파악</a></p>\n<ul>\n<li><a href=\"#1-%EC%83%9D%EA%B0%81%EC%9D%98-%ED%9D%90%EB%A6%84-\">1. 생각의 흐름 💡</a></li>\n<li><a href=\"#2-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%83-%EF%B8%8F\">2. 문제 해결에 필요한 것 🗝️</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0\">문제 해결</a></p>\n<ul>\n<li><a href=\"#1-%EC%86%8C%EC%8A%A4-%EC%BD%94%EB%93%9C\">1. 소스 코드</a></li>\n<li><a href=\"#2-%EC%86%8C%EC%8A%A4-%EC%BD%94%EB%93%9C-%ED%95%B4%EC%84%9D\">2. 소스 코드 해석</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"출처 : https://www.acmicpc.net/problem/7576 백준 7576번 토마토   문제 철수의 토마토 농장에서는 토마토를 보관하는 큰 창고를 가지고 있다. 토마토는 아래의 그림과 같이 격자 모양 상자의 칸에 하나씩 넣어서 창고에 보관한다. img 창고에 보관되는 토마토들 중에는 잘 익은 것도 있지만, 아직 익지 않은 토마토들도 있을 수 있다. 보관 후 하루가 지나면, 익은 토마토들의 인접한 곳에 있는 익지 않은 토마토들은 익은 토마토의 영향을 받아 익게 된다. 하나의 토마토의 인접한 곳은 왼쪽, 오른쪽, 앞, 뒤 네 방향에 있는 토마토를 의미한다. 대각선 방향에 있는 토마토들에게는 영향을 주지 못하며, 토마토가 혼자 저절로 익는 경우는 없다고 가정한다. 철수는 창고에 보관된 토마토들이 며칠이 지나면 다 익게 되는지, 그 최소 일수를 알고 싶어 한다. 토마토를 창고에 보관하는 격자모양의 상자들의 크기와 익은 토마토들과 익지 않은 토마토들의 정보가 주어졌을 때, 며…","frontmatter":{"date":"March 12, 2025","title":"[백준] 7576번 토마토 (Python 파이썬)","categories":"Algorithm","author":"변우중","emoji":"🏋🏻"},"fields":{"slug":"/25-03-12_1/"}},"next":{"id":"d8a0e52d-1659-50f3-829a-8a40745bcc7c","html":"<p>출처 : <a href=\"https://www.acmicpc.net/problem/14502\">https://www.acmicpc.net/problem/14502</a></p>\n<p>백준 14502번 연구소</p>\n<p> </p>\n<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<hr>\n<p>인체에 치명적인 바이러스를 연구하던 연구소에서 바이러스가 유출되었다. 다행히 바이러스는 아직 퍼지지 않았고, 바이러스의 확산을 막기 위해서 연구소에 벽을 세우려고 한다.</p>\n<p>연구소는 크기가 N×M인 직사각형으로 나타낼 수 있으며, 직사각형은 1×1 크기의 정사각형으로 나누어져 있다. 연구소는 빈 칸, 벽으로 이루어져 있으며, 벽은 칸 하나를 가득 차지한다.</p>\n<p>일부 칸은 바이러스가 존재하며, 이 바이러스는 상하좌우로 인접한 빈 칸으로 모두 퍼져나갈 수 있다. 새로 세울 수 있는 벽의 개수는 3개이며, 꼭 3개를 세워야 한다.</p>\n<p>예를 들어, 아래와 같이 연구소가 생긴 경우를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2 0 0 0 1 1 0\n0 0 1 0 1 2 0\n0 1 1 0 1 0 0\n0 1 0 0 0 0 0\n0 0 0 0 0 1 1\n0 1 0 0 0 0 0\n0 1 0 0 0 0 0</code></pre></div>\n<p>이때, 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면, 바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.</p>\n<p>2행 1열, 1행 2열, 4행 6열에 벽을 세운다면 지도의 모양은 아래와 같아지게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2 1 0 0 1 1 0\n1 0 1 0 1 2 0\n0 1 1 0 1 0 0\n0 1 0 0 0 1 0\n0 0 0 0 0 1 1\n0 1 0 0 0 0 0\n0 1 0 0 0 0 0</code></pre></div>\n<p>바이러스가 퍼진 뒤의 모습은 아래와 같아진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2 1 0 0 1 1 2\n1 0 1 0 1 2 2\n0 1 1 0 1 2 2\n0 1 0 0 0 1 2\n0 0 0 0 0 1 1\n0 1 0 0 0 0 0\n0 1 0 0 0 0 0</code></pre></div>\n<p>벽을 3개 세운 뒤, 바이러스가 퍼질 수 없는 곳을 안전 영역이라고 한다. 위의 지도에서 안전 영역의 크기는 27이다.</p>\n<p>연구소의 지도가 주어졌을 때 얻을 수 있는 안전 영역 크기의 최댓값을 구하는 프로그램을 작성하시오.</p>\n<p> </p>\n<h2 id=\"문제-파악\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%8C%8C%EC%95%85\" aria-label=\"문제 파악 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 파악</h2>\n<hr>\n<h3 id=\"1-생각의-흐름-\" style=\"position:relative;\"><a href=\"#1-%EC%83%9D%EA%B0%81%EC%9D%98-%ED%9D%90%EB%A6%84-\" aria-label=\"1 생각의 흐름  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 생각의 흐름 💡</h3>\n<ul>\n<li>바이러스가 있는 2의 위치에서 상하좌우로 0이 있는 곳을 탐색하여 2로 변경해야 한다.\n=> BFS 이용하자.</li>\n<li>0의 위치에 벽(1)을 3개를 세워 바이러스의 경로를 차단할 수 있다.\n<ul>\n<li><em>현재 바이러스가 있는 곳에서 상하좌우를 탐색하여 감염시키는 것을 1개의 턴이라고 했을 때,</em>\n<em>매 턴마다 몇 개의 감염이 늘어나는지 파악하여 <strong>3개가 늘어나는 턴에서 벽을 세우면 될까?</strong></em>\n=> 이전의 턴에서 벽으로 막을 수 있으면 막는 것이 더 낫기 때문에 <strong>잘못된 접근</strong>임</li>\n<li>각각의 바이러스가 감염이 늘어나는 개수가 너무 무작위기 때문에 <strong>현재 턴에서 감염이 늘어나는 개수와</strong>\n<strong>이전 턴에서 감염이 늘어나는 개수들을 비교해서 벽을 막는 것은 너무 복잡함</strong></li>\n</ul>\n</li>\n<li>그러면 <strong>벽을 세우는 모든 경우에서 가장 감염이 적게 되는 경우를 찾아서</strong> 그 경우에서 빈 칸(0)의 개수를 출력하자.\n=> 계산복잡도가 높아질 수 있지만 가장 최선의 방법으로 보임</li>\n</ul>\n<p> </p>\n<h3 id=\"2-문제-해결에-필요한-것-️\" style=\"position:relative;\"><a href=\"#2-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%83-%EF%B8%8F\" aria-label=\"2 문제 해결에 필요한 것 ️ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 문제 해결에 필요한 것 🗝️</h3>\n<ul>\n<li>3개의 벽을 세우는 모든 조합을 찾아야 함 (itertools의 combinations() 함수 이용)</li>\n<li><strong>3개의 벽을 세운 후에 BFS 진행</strong>하여 빈 칸(0)의 개수를 set에 저장함\n<ul>\n<li>list 대신 set을 이용해 조금이라도 복잡도를 낮춤 (어차피 우리는 빈 칸 개수의 최댓값만 필요함!!)</li>\n<li>벽을 세우는 함수(wall())를 먼저 호출한 후, 벽을 세우는 함수에서 벽을 세우는 각 경우마다 BFS 함수(bfs_empty_count())를 호출함</li>\n<li>BFS 함수로 현재 벽을 세우는 조합에서 빈 칸의 개수를 반환함</li>\n</ul>\n</li>\n<li>벽을 세우는 각 경우마다 queue를 새롭게 생성해야 하고, 연구소 감염 맵(lab)도 deep copy한 것으로 진행함</li>\n</ul>\n<p> </p>\n<h2 id=\"문제-해결\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0\" aria-label=\"문제 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 해결</h2>\n<hr>\n<h3 id=\"1-소스-코드\" style=\"position:relative;\"><a href=\"#1-%EC%86%8C%EC%8A%A4-%EC%BD%94%EB%93%9C\" aria-label=\"1 소스 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 소스 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n<span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> combinations\n<span class=\"token keyword\">import</span> copy\n\n<span class=\"token comment\"># 모든 조합의 벽 세우기</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">wall</span><span class=\"token punctuation\">(</span>empty_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    walls_combi <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>combinations<span class=\"token punctuation\">(</span>empty_loc<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  \n    <span class=\"token comment\"># 벽을 세우는 조합 하나씩 접근</span>\n    <span class=\"token keyword\">for</span> walls <span class=\"token keyword\">in</span> walls_combi<span class=\"token punctuation\">:</span>\n        new_lab <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>lab<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 연구소 맵 깊은 복사</span>\n        new_queue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 새로운 큐 생성</span>\n  \n        <span class=\"token comment\"># 현재 조합인 3개의 벽을 세움</span>\n        new_lab<span class=\"token punctuation\">[</span>walls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>walls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        new_lab<span class=\"token punctuation\">[</span>walls<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>walls<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        new_lab<span class=\"token punctuation\">[</span>walls<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>walls<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  \n        <span class=\"token comment\"># 벽 세운 후의 lab에서 bfs 실행하여 빈 칸 개수를 set에 추가</span>\n        empty_count<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>bfs_empty_count<span class=\"token punctuation\">(</span>new_lab<span class=\"token punctuation\">,</span> new_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 빈 칸(0)인 곳의 개수들 중에서 최댓값 반환</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>empty_count<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">bfs_empty_count</span><span class=\"token punctuation\">(</span>nlab<span class=\"token punctuation\">,</span> nqueue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">while</span> nqueue<span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> nqueue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 0일 때, 2로 바꾸고 큐에 추가</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> nlab<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    nlab<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n                    nqueue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 빈 칸(0)인 곳의 개수</span>\n    n_empty_count <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> nlab<span class=\"token punctuation\">)</span>\n  \n    <span class=\"token keyword\">return</span> n_empty_count\n\n\nm<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlab <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\ndx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\ndy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nqueue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nempty_loc <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nempty_count <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 2의 위치(바이러스 위치) 저장</span>\n        <span class=\"token keyword\">if</span> lab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 0의 위치(빈 칸 위치) 저장</span>\n        <span class=\"token keyword\">if</span> lab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            empty_loc<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  \n\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>wall<span class=\"token punctuation\">(</span>empty_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"2-소스-코드-해석\" style=\"position:relative;\"><a href=\"#2-%EC%86%8C%EC%8A%A4-%EC%BD%94%EB%93%9C-%ED%95%B4%EC%84%9D\" aria-label=\"2 소스 코드 해석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 소스 코드 해석</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">m<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlab <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\ndx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\ndy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nqueue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nempty_loc <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nempty_count <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 2의 위치(바이러스 위치) 저장</span>\n        <span class=\"token keyword\">if</span> lab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 0의 위치(빈 칸 위치) 저장</span>\n        <span class=\"token keyword\">if</span> lab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            empty_loc<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  \n\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>wall<span class=\"token punctuation\">(</span>empty_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>행의 수(m), 열의 수(n), 연구소 감염 맵(lab), dx, dy, queue, 0의 위치(empty_loc), 벽을 세우는 경우마다 빈 칸(0)의 개수를 저장하는 set 을 정의한다.</li>\n<li>2의 위치(초기 바이러스 위치)와 0의 위치(빈 칸)를 각각 queue와 empty_loc에 저장한다.</li>\n<li>empty_count(벽을 세우는 경우마다 빈 칸의 개수 집합)를 인자로 하여 wall() 함수를 호출한다.</li>\n</ul>\n<p> </p>\n<p><strong>[wall() 함수]</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">wall</span><span class=\"token punctuation\">(</span>empty_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    walls_combi <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>combinations<span class=\"token punctuation\">(</span>empty_loc<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  \n    <span class=\"token comment\"># 벽을 세우는 조합 하나씩 접근</span>\n    <span class=\"token keyword\">for</span> walls <span class=\"token keyword\">in</span> walls_combi<span class=\"token punctuation\">:</span>\n        new_lab <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>lab<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 연구소 맵 깊은 복사</span>\n        new_queue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 새로운 큐 생성</span>\n  \n        <span class=\"token comment\"># 현재 조합인 3개의 벽을 세움</span>\n        new_lab<span class=\"token punctuation\">[</span>walls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>walls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        new_lab<span class=\"token punctuation\">[</span>walls<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>walls<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        new_lab<span class=\"token punctuation\">[</span>walls<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>walls<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  \n        <span class=\"token comment\"># 벽 세운 후의 lab에서 bfs 실행하여 빈 칸 개수를 set에 추가</span>\n        empty_count<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>bfs_empty_count<span class=\"token punctuation\">(</span>new_lab<span class=\"token punctuation\">,</span> new_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 빈 칸(0)인 곳의 개수들 중에서 최댓값 반환</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>empty_count<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>wall() 함수에서 3개의 벽의 모든 조합을 생성한다.</li>\n<li>각 벽의 조합을 for문을 통해 접근한다.\n<ul>\n<li>각 벽의 조합에서 연구소 맵을 깊은 복사를 진행하고(new_lab), 이미 만들어져 있는 queue로 새로운 큐(nqueue)를 생성한다.</li>\n<li>현재 조합인 3개의 벽을 세운다. (new_lab이 변형됨)</li>\n<li>bfs_empty_count() 함수를 <strong>현재 연구소 맵인 new_lab</strong>과 <strong>2의 위치를 저장한 new_queue</strong>를 인자로 하여 호출한다.\n=> 호출 결과는 해당 벽의 조합에서의 빈 칸 개수임</li>\n</ul>\n</li>\n<li>빈 칸(0)의 개수들 중에 최댓값을 반환한다.</li>\n</ul>\n<p> </p>\n<p><strong>[bfs_empty_count() 함수]</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">bfs_empty_count</span><span class=\"token punctuation\">(</span>nlab<span class=\"token punctuation\">,</span> nqueue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">while</span> nqueue<span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> nqueue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 0일 때, 2로 바꾸고 큐에 추가</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> nlab<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    nlab<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n                    nqueue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 빈 칸(0)인 곳의 개수</span>\n    n_empty_count <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> nlab<span class=\"token punctuation\">)</span>\n  \n    <span class=\"token keyword\">return</span> n_empty_count</code></pre></div>\n<ul>\n<li>인자로 받은 ”<strong>현재</strong>” 연구소 맵(nlab)과 2의 위치를 저장한 큐(nqueue)에 대해 코드가 진행된다.</li>\n<li><strong>이미 벽을 세운 상태에서 바이러스 감염을 진행됐을 때 빈 칸이 얼마나 남을지를 보는 것</strong>이다!!</li>\n<li>큐(nqueue)가 빌 때까지 while문을 진행한다.\n<ul>\n<li>nqueue에서 바이러스 위치 하나를 뽑아온다.</li>\n<li>현재 뽑아온 바이러스 위치에서 dx와 dy를 이용해 상하좌우를 for문을 이용해 탐색한다.\n<ul>\n<li>연구소 맵을 벗어나지 않는 공간에서 상하좌우를 이동했을 때, 그 값이 0이면 2로 바꾼 후에 nqueue에 추가한다.</li>\n</ul>\n</li>\n<li>감염된 위치에서 이를 반복할 것임!!</li>\n</ul>\n</li>\n<li>큐가 비었으면 감염이 다 진행된 것이므로, 이제 빈 칸(0)의 개수를 세어 반환하여 함수 종료한다.\n=> 그러면, wall() 함수에서 다음 3개의 벽의 조합에서 BFS를 또 진행할 것이다!!\n=> 모든 조합에서 BFS 진행하면 wall() 함수에서 빈 칸(0) 개수의 최댓값을 반환할 것이다.</li>\n</ul>\n<p>끝. (어려웠다.)</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%A0%9C\">문제</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%8C%8C%EC%95%85\">문제 파악</a></p>\n<ul>\n<li><a href=\"#1-%EC%83%9D%EA%B0%81%EC%9D%98-%ED%9D%90%EB%A6%84-\">1. 생각의 흐름 💡</a></li>\n<li><a href=\"#2-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%83-%EF%B8%8F\">2. 문제 해결에 필요한 것 🗝️</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0\">문제 해결</a></p>\n<ul>\n<li><a href=\"#1-%EC%86%8C%EC%8A%A4-%EC%BD%94%EB%93%9C\">1. 소스 코드</a></li>\n<li><a href=\"#2-%EC%86%8C%EC%8A%A4-%EC%BD%94%EB%93%9C-%ED%95%B4%EC%84%9D\">2. 소스 코드 해석</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 11, 2025","title":"[백준] 14502번 연구소 (Python 파이썬)","categories":"Algorithm","author":"변우중","emoji":"🏋🏻"},"fields":{"slug":"/25-03-11_1/"}},"prev":{"id":"afd5a24d-7f38-5ab5-a413-5f8ff667a157","html":"<p>참고 : Hands-On Machine Learning with Scikit-Learn, Keras &#x26; TensorFlow 2판, 오렐리앙 제롱, 한빛미디어.</p>\n<p>소스코드 참고 : <a href=\"https://github.com/codingalzi/handson-ml2\">https://github.com/codingalzi/handson-ml2</a></p>\n<p> </p>\n<p>빅데이터 관련 곧 박사 졸업하는 지인께서 기본부터 잘 쌓아야 이 분야에서 오래 살아남을 수 있다는 이야기로,\nHands-On Machine Learning with Scikit-Learn, Keras &#x26; TensorFlow (앞으로 핸즈온이라고 부를 것임) 이라는 교재를 정독하게 되었다.</p>\n<p>교재를 보고 공부를 시작한지는 3달이 넘어가는데, 깃허브 블로그에 대해 잘 알지 못해서 노션에 정리만 해두고 그동안 묵혀 두었다.(본 교재는 현재 5장 읽는 중이다..) 최근 자격증 시험(ADsP, SQLD), 알고리즘 공부, ML 인터넷 강의 수강 등으로 정리 속도가 느려졌는데, 더 속도를 내어 완독하자아아앗!!</p>\n<p> </p>\n<blockquote>\n<p>참고로, 노션에 정리한 모든 내용은 모두 올리지 못한다. 킹작권 이슈로…</p>\n<p>모르는 내용 있으면 끝까지 파고드는 습관이 있어서 본 교재 내용뿐만 아니라, 새롭게 찾아본 내용들도 노션에 함께 정리해두었는데, 올릴 수가 없다…ㅎㅎ</p>\n<p>그래서 <strong>짧게 회고(Reflection)만 올리기로 결정</strong>했다.</p>\n</blockquote>\n<p>고럼 레츠기릿.</p>\n<p> </p>\n<hr>\n<p>목차는 아래와 같이 분류했다.</p>\n<ul>\n<li>머신러닝이란</li>\n<li>왜 머신러닝을 사용하는가</li>\n<li>애플리케이션</li>\n<li>머신러닝 시스템 종류\n<ul>\n<li>지도, 비지도, 준지도, 강화학습</li>\n<li>배치 학습, 온라인 학습</li>\n<li>사례기반 학습과 모델기반 학습</li>\n</ul>\n</li>\n<li>머신러닝 프로젝트 형태</li>\n<li>머신러닝 주요 과제</li>\n<li>테스트와 검증</li>\n<li>공짜 점심 없음 (No Free Lunch, NFL) 이론</li>\n</ul>\n<p>목차만 봐도 어느 알고리즘에 대한 깊은 내용은 없을 것 같다. 그렇다. 머신러닝에 대한 깊이 있는 내용보다는 머신러닝이 무엇인지, 어디에 사용되는지와 여러 학습 방식에 대해 간단한 설명이 써져 있다. 처음 머신러닝을 접하는 사람에게 전체적으로 학습의 틀을 잡기에 좋았다.</p>\n<p>참고로, <strong>몇 가지 목차에 대해서만 회고를 남길 것</strong>이다!</p>\n<p> </p>\n<h3 id=\"머신러닝이란\" style=\"position:relative;\"><a href=\"#%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D%EC%9D%B4%EB%9E%80\" aria-label=\"머신러닝이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>머신러닝이란</h3>\n<hr>\n<p>머신러닝은 [아서 새뮤얼(Arthur Samuel)]보다는 <strong>[톰 미첼(Tom Mitchell)]의 머신러닝 정의</strong>가 통용된다고 한다.\n“어떤 작업 T에 대한 컴퓨터 프로그램의 성능을 P로 측정했을 때 경험 E로 인해 성능이 향상됐다면, 이 컴퓨터 프로그램은 작업 T와 성능 측정 P에 대해 경험 E로 학습한 것이다.”</p>\n<p>즉, 머신러닝은 이전의 어떤 경험을 통해 학습한 결과를 바탕으로 현재의 일을 더 높은 성능으로 수행하는 것이라 할 수 있다.</p>\n<p>그렇다면, 머신러닝의 과정은 ’<strong>사전 학습</strong>‘과 ’<strong>현재의 일</strong>’, ’<strong>사전 학습을 통한 높아진 성능</strong>’ 3가지 키워드로 정리할 수 있을 것 같다.</p>\n<p> </p>\n<h3 id=\"애플리케이션\" style=\"position:relative;\"><a href=\"#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98\" aria-label=\"애플리케이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>애플리케이션</h3>\n<hr>\n<p>머신러닝은 반도체 생산 라인에서 이미지를 분석하여 스크래치 등을 자동으로 분류할 때, 이전의 뇌 종양의 모습들과 비교해 종양 진단할 때에 이용되고, 신용 카드의 일반적인 거래와 비교하여 부정 거래도 탐지에도 이용된다. 참고로, 최근 많이 사용하는 Chat-GPT는 머신러닝의 한 종류인 딥러닝, 특히 트랜스포머 모델로 만들어진 것이다. (머신러닝이 딥러닝을 포함한다.)</p>\n<p>최근에 읽었던 <strong>IT 트렌드 2025(김지현)</strong> 책에서 몇 년 전 화두가 되었던 ’<strong>메타버스에서 AI 에이전트 서비스가 구현될 때 모바일이나 웹으로 사용하는 것보다 더 나은 사용자 경험을 제공할 것</strong>‘이라 하였다. 작년 2024년 말에 SK Summit, 삼성 개발자 콘퍼런스, 네이버 Dan24를 영상을 보고, 다녀오면서 올해 2025년 키워드를 <strong>AI 에이전트</strong>로 보는 듯 했다. 기업들에서 관심을 가지고 있는 것들을 보았을 때 AI가 녹여 들어갈 분야는 정말 무궁무진하다고 생각이 든다.\n(참고로 LG 전자에서는 냉장고가 필요 없도록 AI 에이전트가 원하는 음식의 재료를 가져와서 세팅까지 해주는 것을 연구 중이라 했다.)</p>\n<p> </p>\n<h3 id=\"머신러닝-시스템-종류\" style=\"position:relative;\"><a href=\"#%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%A2%85%EB%A5%98\" aria-label=\"머신러닝 시스템 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>머신러닝 시스템 종류</h3>\n<hr>\n<p>머신러닝의 시스템 종류는 ‘사람의 감독하에 훈련하는 것인지’, ‘실시간으로 점진적인 학습을 하는지’, ‘단순히 알고 있는 데이터 포인트와 새로운 데이터 포인트를 비교하는 건지, 훈련 데이터셋에서 패턴을 발견하여 예측 모델을 만드는 건지’ 등의 기준으로 나눌 수 있다.</p>\n<p>첫 번째 : <strong>사람의 감독하에 훈련하는 것인지</strong></p>\n<ul>\n<li>\n<p><strong>지도 학습, 비지도 학습, 준지도 학습, 강화 학습</strong>으로 나눌 수 있다.</p>\n</li>\n<li>\n<p>말 그대로, 지도 학습은 사람이 지도하여 기계를 훈련시키는 것이다.\n<strong>그러면 어떻게 지도하는 것인가?</strong></p>\n<ul>\n<li>여기서 중요한 키워드 ’<strong>레이블(label, 라벨, 타깃 데이터)</strong>‘이다.\n어떤 훈련 데이터로서 입력 데이터와 타깃 데이터를 함께 주고, 기계한테 ‘너 입력 데이터의 정답은 타깃 데이터야.’ 라고 직접 훈련시키는 것이다. <strong>정답을 알려주는 것</strong>.</li>\n<li>그러면 비지도 학습은? 레이블이 없다. ‘훈련 데이터 줄테니 너가 알아서 학습해’ 라고 한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>지도 학습</strong>의 유형은 크게 <strong>회귀</strong>(<strong>연속적인 값</strong>을 예측)와 <strong>분류</strong>(<strong>범주형 값</strong>을 예측)으로 나눈다.</p>\n<ul>\n<li>회귀는 선형 회귀, 다항 회귀, 결정트리 회귀, 랜덤 포레스트 회귀, 서포트 벡터 회귀 등등이 있고,\n분류는 로지스틱 회귀 분류, 결정 트리, 랜덤 포레스트, 서포트 벡터 머신 등이 있는데\n다음에 깊이 설명한다!!</li>\n</ul>\n</li>\n<li>\n<p><strong>비지도 학습</strong>의 유형은 <strong>군집</strong> 등이 있는데, 이것도 나중에 깊이 설명 한다!</p>\n</li>\n<li>\n<p><strong>준지도 학습</strong>은 무엇인가? 지도 학습과 비지도 학습을 동시에 이용한 것이다.\n어느 훈련 데이터는 레이블이 함께 있지만, 없는 것도 있다는 것이다. 아예 레이블이 없는 것보다는 훈련의 정확도가 높아지지 않을까?</p>\n</li>\n<li>\n<p><strong>강화 학습</strong>은 무엇인가? (참고로 최근 중국에서 공개한 <strong>딥시크</strong>가 강화 학습으로 만들어졌다고 한다.)</p>\n<ul>\n<li>중등 교사 임용 공부를 하면서 교육학에서 강화 학습에 대해 깊이 배웠다. 사람을 학습시키는 것과 기계를 학습시키는 것은 이론적으로 보았을 때 별반 다를 게 없다.</li>\n<li>강화는 어떤 특정 행동의 빈도 수를 높이는 것 (벌은 어떤 특정 행동의 빈도 수를 낮추는 것)인데,\n<strong>특정 행동(잘한 행동, 못한 행동)의 빈도 수를 높이고 낮추기 위해</strong> <strong>강화물(칭찬)을 주거나 뺏거나, 벌(혼냄)을 주거나 뺏거나</strong> 할 수 있다.</li>\n<li>뭐 어떤 방법으로든 ”<strong><u>잘한 행동의 빈도 수를 높이고, 잘못된 행동의 빈도 수를 높이면 된다.</u></strong>”\n=> <strong>그러면, 내가 만들고자 하는 프로그램에 따라 ‘잘한 행동의 모습을 더 보여야 하는건지’, ‘잘못된 행동의 모습을 덜 보여야 하는 건지’ 적절히 정해서 강화 학습을 진행하면 될 것 같다!!!</strong></li>\n</ul>\n</li>\n</ul>\n<p> </p>\n<p>두 번째 : <strong>실시간으로 점진적인 학습을 하는지</strong></p>\n<ul>\n<li><strong>실시간으로 점진적으로 학습</strong>하면 ’<strong>온라인 학습</strong>’, 그렇지 않으면 ’<strong>배치학습</strong>‘이다.</li>\n<li>참고로 <strong>Chat-GPT</strong>는 <strong>사전 학습(Pre-training)</strong> 과 <strong>후속 미세 조정(Fine-tuning)</strong> 으로 만들어졌다. 실시간으로 훈련시키는 것이 아닌, 따로 모델을 학습시켜서 그 버전을 배포하는 식이다. 그 이후에 미세 조정을 하는 식이다.</li>\n</ul>\n<p> </p>\n<p>세 번째 : <strong>단순히 알고 있는 데이터 포인트와 새로운 데이터 포인트를 비교하는 건지, 훈련 데이터셋에서 패턴을 발견하여 예측 모델을 만드는 건지</strong></p>\n<ul>\n<li>단순히 알고 있는 데이터 포인트와 새로운 데이터 포인트를 비교하는 것은 <strong>사례 기반 학습</strong>이다.\n훈련 샘플들을 기억해 그 사례들과 유사도를 측정하면서 일반화하는 것이다.\n(KNN 알고리즘이 사례 기반 학습의 대표적인 알고리즘이다!! 요거 재밌다..)</li>\n<li>훈련 데이터셋에서 패턴을 발견하여 예측 모델을 만드는 것은 <strong>모델 기반 학습</strong>이다.\n훈련 데이터셋으로 모델을 학습시키고, 그 모델로 다른 데이터에 대해 예측하는 것이다.</li>\n</ul>\n<p> </p>\n<h3 id=\"머신러닝-주요-과제\" style=\"position:relative;\"><a href=\"#%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-%EC%A3%BC%EC%9A%94-%EA%B3%BC%EC%A0%9C\" aria-label=\"머신러닝 주요 과제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>머신러닝 주요 과제</h3>\n<hr>\n<p>머신러닝 프로젝트의 전과정에서 주의 깊이 고려할 것을 정리해두고 있다.</p>\n<p><strong>훈련 데이터가 충분한지, 잡음이 있는 훈련 데이터가 없는지, 훈련 데이터가 대표성을 가지고 있는지, 훈련 데이터의 특성 중에 중요하고 중요하지 않은 것을 어떻게 처리할지, 모델이 훈련 데이터에 어느정도로 적합시킬지</strong> 등에 대한 설명이 있다.</p>\n<p>당시 이 챕터를 보면서 <strong>머신러닝 공부의 방향성을 설정하는 데에 가장 유용했다</strong>. 머신러닝을 처음 접해 어떻게 학습을 해야할지 몰랐는데, 계속 어느 포인트에 집중하여 이 과제들을 어떻게 해결할지를 생각하게 해주었다.</p>\n<p> </p>\n<h3 id=\"테스트와-검증\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EA%B2%80%EC%A6%9D\" aria-label=\"테스트와 검증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트와 검증</h3>\n<hr>\n<p>모델을 훈련하는 과정에서 검증(Validation)을 해야 하고, 모델 훈련을 마친 후에도 테스트(Test)를 해야 한다.</p>\n<p>가장 중요한 내용은</p>\n<p>”<strong>테스트(Test)용의 데이터를 따로 떼어 내어 모델을 다 훈련할 때까지 절대 건들지 말자.</strong>”</p>\n<p>”<strong>모델을 훈련하면서 여러 모델을 비교하기 위해 검증(Validation) 과정을 거칠 수 있는데, 이것도 모델을 훈련하는 데이터셋과 검증 세트를 따로 분리해야 한다.</strong>”</p>\n<p>추가로,</p>\n<p>“훈련 데이터에서 훈련 세트와 검증 세트로 분리할 때, 각각 <strong>전체의 훈련 데이터셋의 대표성</strong>을 띄우도록 한다.”</p>\n<p>“검증 과정에서 <strong>홀드아웃 검증</strong>, <strong>교차 검증</strong> 등의 방법을 활용할 수 있다.”</p>\n<p>(자세한 내용은 다음에 할 것이다!!)</p>\n<p>  </p>\n<h3 id=\"공짜-점심-없음-no-free-lunch-nfl-이론\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EC%A7%9C-%EC%A0%90%EC%8B%AC-%EC%97%86%EC%9D%8C-no-free-lunch-nfl-%EC%9D%B4%EB%A1%A0\" aria-label=\"공짜 점심 없음 no free lunch nfl 이론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공짜 점심 없음 (No Free Lunch, NFL) 이론</h3>\n<hr>\n<p>말 그대로 “너 OO하지 않으면 국물도 없어.” 이론이다..\n어떤 데이터에 대해 어떠한 가정도 하지 않으면 그 모델을 다른 모델보다 선호할 근거가 없다는 의미라고 하는데,</p>\n<p>조금 더 자세히 말하면…</p>\n<p>머신러닝 모델이 정말 많다. <strong>이 모델들 중에 어떠한 데이터를 가져오든 항상 좋은 모델은 없다는 의미</strong>이다.\n<strong>데이터에 따라 좋은 성능을 내는 모델이 다르기 때문에 모델의 선택을 달라질 수 있다</strong>는 것이다.</p>\n<p>그러면, 우리는 하나의 데이터셋이 주어지면 여러 모델을 학습시키는 수고로움이 필요하다.\n그러한 수고로움이 있어야 좋은 성능을 내는 모델을 선택해 가질 수 있다.</p>\n<p> </p>\n<p>연습문제는 풀기는 했지만.. 한 가지만 중요하게 보고 가면 될 듯 하다.</p>\n<p>훈련을 진행한 모델이 <strong>훈련 세트에서는 좋은 성능</strong>을 냈는데, <strong>새로운 데이터에서 좋지 못한 성능</strong>을 냈다면?\n<strong>훈련 데이터에 과대 적합</strong>(훈련 데이터에 굉장히 맞춤형으로 제작한 모델이라는 의미)이므로,\n<strong>훈련 데이터를 더 많이 모으거나, 모델 단순화하거나, 훈련 데이터의 잡음을 제거</strong>해야 한다!</p>\n<p> </p>\n<p>끝.\n(나에게 시간만 무한정으로 주어진다면 얼른 다음 장 회고도 올리고 싶다.. 내 하루엔 회고 올리기를 위한 추가시간이 있었다면..)</p>","frontmatter":{"date":"March 14, 2025","title":"Hands-on Machine learning 1장 회고(24년 말 콘퍼런스 이야기를 곁들인)","categories":"Reflections(ML/DL)","author":"변우중","emoji":"✍🏻"},"fields":{"slug":"/25-03-14_1/"}},"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/25-03-12_1/","nextSlug":"/25-03-11_1/","prevSlug":"/25-03-14_1/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}